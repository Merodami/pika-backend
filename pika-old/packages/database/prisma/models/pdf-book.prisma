/// Voucher books for PDF generation
model VoucherBook {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title             String             @db.VarChar(255)
  edition           String?            @db.VarChar(100) // e.g., "January 2024", "Special Edition", "North Region"
  bookType          VoucherBookType    @default(MONTHLY) @map("book_type")
  month             Int?               // 1-12 (optional for non-monthly books)
  year              Int                // e.g., 2024
  status            VoucherBookStatus  @default(DRAFT)
  totalPages        Int                @default(24) @map("total_pages")
  publishedAt       DateTime?          @map("published_at") @db.Timestamptz(6)
  coverImageUrl     String?            @map("cover_image_url") @db.VarChar(500) // Front cover image
  backImageUrl      String?            @map("back_image_url") @db.VarChar(500)  // Back cover image
  pdfUrl            String?            @map("pdf_url") @db.VarChar(500)
  pdfGeneratedAt    DateTime?          @map("pdf_generated_at") @db.Timestamptz(6)
  metadata          Json?              // Book metadata (edition number, distribution info, region, etc.)
  createdBy         String             @map("created_by") @db.Uuid // User who created the book
  providerId        String?            @map("provider_id") @db.Uuid // Optional provider association
  createdAt         DateTime?          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?          @default(now()) @map("updated_at") @db.Timestamptz(6) @updatedAt
  deletedAt         DateTime?          @map("deleted_at") @db.Timestamptz(6)

  // Relations
  pages             VoucherBookPage[]
  distributions     BookDistribution[]
  createdByUser     User               @relation("VoucherBookCreatedBy", fields: [createdBy], references: [id])
  provider          Provider?          @relation(fields: [providerId], references: [id])
  
  @@index([status])
  @@index([year, month])
  @@index([bookType])
  @@index([edition])
  @@index([status, year, month]) // For filtering published books by date
  @@index([bookType, status]) // For filtering by type and status
  @@index([pdfGeneratedAt]) // For finding recently generated PDFs
  @@index([publishedAt]) // For sorting by publication date
  @@index([createdAt]) // For default sorting
  @@index([deletedAt]) // For soft delete filtering
  @@index([createdBy]) // For filtering by creator
  @@index([providerId]) // For filtering by provider
  @@map("voucher_books")
  @@schema("marketplace")
}

/// Pages within a voucher book
model VoucherBookPage {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bookId            String            @map("book_id") @db.Uuid
  pageNumber        Int               @map("page_number")
  layoutType        PageLayoutType    @default(STANDARD) @map("layout_type")
  metadata          Json?             // Page-specific metadata
  createdAt         DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?         @default(now()) @map("updated_at") @db.Timestamptz(6) @updatedAt

  // Relations
  book              VoucherBook       @relation(fields: [bookId], references: [id], onDelete: Cascade)
  adPlacements      AdPlacement[]
  
  @@unique([bookId, pageNumber]) // One page number per book
  @@index([bookId])
  @@map("voucher_book_pages")
  @@schema("marketplace")
}

/// Flexible content placements on voucher book pages (vouchers, images, ads)
model AdPlacement {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pageId            String            @map("page_id") @db.Uuid
  contentType       ContentType       @default(VOUCHER) @map("content_type") // VOUCHER, IMAGE, AD
  voucherId         String?           @map("voucher_id") @db.Uuid // Optional - only for VOUCHER type
  providerId        String?           @map("provider_id") @db.Uuid // Optional - only for voucher/ad content
  position          Int               // Starting position 1-8 for standard layout
  size              AdSize            @default(SINGLE) // SINGLE, QUARTER, HALF, FULL
  spacesUsed        Int               @default(1) @map("spaces_used") // 1, 2, 4, or 8 spaces
  imageUrl          String?           @map("image_url") @db.VarChar(500) // Main content image
  qrCodePayload     String?           @map("qr_code_payload") @db.Text // JWT payload from crypto service (vouchers only)
  shortCode         String?           @map("short_code") @db.VarChar(20) // Human-readable code (vouchers only)
  title             String?           @db.VarChar(255) // Content title
  description       String?           @db.Text // Content description
  metadata          Json?             // Placement metadata (design settings, pricing, etc.)
  createdAt         DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?         @default(now()) @map("updated_at") @db.Timestamptz(6) @updatedAt

  // Relations
  page              VoucherBookPage   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  voucher           Voucher?          @relation(fields: [voucherId], references: [id]) // Optional
  provider          Provider?         @relation(fields: [providerId], references: [id]) // Optional
  
  @@unique([pageId, position]) // One content per starting position per page
  @@index([pageId])
  @@index([voucherId])
  @@index([providerId])
  @@index([contentType])
  @@map("ad_placements")
  @@schema("marketplace")
}

/// Tracking for PDF book distribution
model BookDistribution {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bookId            String            @map("book_id") @db.Uuid
  distributorName   String            @map("distributor_name") @db.VarChar(255)
  quantity          Int
  distributedAt     DateTime          @map("distributed_at") @db.Timestamptz(6)
  location          Json?             // Distribution location details
  metadata          Json?             // Additional distribution metadata
  createdAt         DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  book              VoucherBook       @relation(fields: [bookId], references: [id])
  
  @@index([bookId])
  @@index([distributedAt])
  @@map("book_distributions")
  @@schema("marketplace")
}